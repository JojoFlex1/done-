import * as Crypto from '@cardano-sdk/crypto';
import { Inspector, ResolutionResult } from './txInspector.js';
import type * as Cardano from '../Cardano/index.js';
import type { AssetInfoWithAmount } from './tokenTransferInspector.js';
import type { AssetProvider } from '../Provider/index.js';
import type { Logger } from 'ts-log';
import type { Milliseconds } from './time.js';
interface TransactionSummaryInspectorArgs {
    addresses: Cardano.PaymentAddress[];
    rewardAccounts: Cardano.RewardAccount[];
    inputResolver: Cardano.InputResolver;
    protocolParameters: Pick<Cardano.ProtocolParameters, 'poolDeposit' | 'stakeKeyDeposit'>;
    assetProvider: Pick<AssetProvider, 'getAssets'>;
    dRepKeyHash?: Crypto.Ed25519KeyHashHex;
    timeout: Milliseconds;
    logger: Logger;
}
export declare type TransactionSummaryInspection = {
    assets: Map<Cardano.AssetId, AssetInfoWithAmount>;
    coins: Cardano.Lovelace;
    collateral: Cardano.Lovelace;
    deposit: Cardano.Lovelace;
    returnedDeposit: Cardano.Lovelace;
    fee: Cardano.Lovelace;
    unresolved: {
        inputs: Cardano.TxIn[];
        value: Cardano.Value;
    };
    resolvedInputs: ResolutionResult['resolvedInputs'];
};
export declare type TransactionSummaryInspector = (args: TransactionSummaryInspectorArgs) => Inspector<TransactionSummaryInspection>;
export declare const getCollateral: (tx: Cardano.Tx, inputResolver: Cardano.InputResolver, addresses: Cardano.PaymentAddress[]) => Promise<Cardano.Lovelace>;
export declare const transactionSummaryInspector: TransactionSummaryInspector;
export {};
//# sourceMappingURL=transactionSummaryInspector.d.ts.map